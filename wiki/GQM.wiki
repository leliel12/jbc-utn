#summary One-sentence summary of this page.

= Práctico 1 =

==Contexto.==

Actualmente esta en desarrollo nuestro proyecto final el cual consiste en un video juego online con interfaz web.
El juego presenta varias características comunes como la simulación de exploración de un mundo, las batallas entre jugadores y la creación de construcciones y unidades. Dado el diseño modular del producto el único momento donde puede generarse un gran cuello de botella para el procesamiento de las peticiones de los usuarios es cuando solicita una batalla.
Estos algoritmos, las batallas, se resuelven por medio de la teoría de colas la cual puede hacer que los tiempos de calculo crezcan exponencialmente generando retardos de mas 3 segundos (inaceptables en tiempos de procesadores).
Es por esto que decidimos implementar este practico para medir, y luego controlar estos comportamientos para que mas personas puedan disfrutar al mismo tiempo del producto.

==GQM==

===Objetivo===

Disminuir la latencia[1] de ejecución del algoritmo de solicitud de batalla a menos de un segundo de ejecución considerando la complejidad[2] de código sin retrasar los plazos de entrega.

===Preguntas / Métricas===

  * *Preguntas*
    * ¿Como mido la latencia en la ejecución del algoritmo de solicitud de batalla?
      * *Metricas*
          * Latencia (m final – m inicial): 
            Es el tiempo total desde que se lanza el algortimo hasta que retorna los valores.
    * ¿Como mido la complejidad de mi código?
      * *Metricas*
          * Complejidad Ciclomática.
           Cantidad de bifurcaciones que posee un metodo/funcion.
           A mas cantidad de bifurcaciones, mas complejidad.
          
          * Incumplimiento de la Ley de Demeter sobre linea de código.
          La ley de Demeter en objetos, se cumple solo si una operación de un objeto utiliza:
            * Las operaciones propias del objeto.
            * Los objetos que tenga asociados o sean atributos del objeto.
            * Los objetos que recibe como parámetro la operación.
            * Los objetos que cree la operación.

== Referencias ==

  # Latencia: Termino utilizado en retardo de transmisión de datos en las redes. Reutilizado en este caso como la suma de los retardos parciales de los algoritmos.
  # Claridad: código con poca ofuscación[3].
  # Ofuscación: Es el código fuente o diseño lógico  que se ha hecho difícil de entender de manera intencional o accidental. Ofuscación y optimización no son necesariamente opuestas, pero involuntariamente a veces se produce cuando los programadores o diseñadores ofuscan en un intento de optimizar prematuramente.