#summary One-sentence summary of this page.

= Práctico 1 =

==Contexto.==

Nuestro estudio consistirá en un video juego online con interfaz web, el cual será el desarrollo realizado para la materia PROYECTO FINAL.

Los requerimientos básicos con los que contamos son:

  * Simulación de exploración de un mundo.
  * Batallas entre jugadores.
  * Creación de Construcciones y Unidades *que sería esto?*.

Analizaremos los tiempos de procesamiento para las solicitudes de batallas entre jugadores, que es cuando es necesario un óptimo tiempo de respuesta. La forma de trabajo de estas solicitudes se basa en Teoría de Colas y el propósito es hacer que el tiempo entre estas sea el menor a un segundo.

==GQM==

===Objetivo.===

Disminuir la latencia[1] de ejecución del algoritmo de solicitud de batalla a menos de un segundo de ejecución considerando la claridad[2] de código y  diseño, sin retrasar los plazos de entrega.

===GQM.===

*SOBRE CADA UNA DE LAS METRICAS EXPLICARIA QUÉ ES Y COMO SE MIDE, PARA QUE QUEDE BIEN CLARO. YO DESCONOZCO QUE ES COMPLEJIDAD ESENCIAL POR EJEMPLO*
*OFUSCACION ENTIENDO QUE ES LA CLARIDAD DE LOS CARACTERES DEL CODIGO. UN CODIGO OFUSCADO SERIA UN CODIGO NO ENTENDIBLE A SIMPLE VISTA, ME EQUIVOCO? NO TENDRIA QUE VER CON LA COMPLEJIDAD*

  * *Preguntas*
    * ¿Como mido la latencia en la ejecución del algoritmo de solicitud de batalla?
      * *Metricas*
          * Tiempo de Ejecución (m final – m inicial)
          * Profiling. *¿Qué es esto?*
    * ¿Como mido la complejidad de mi código? *El objetivo dice claridad y creo que no tiene nada que ver con complejidad*
      * *Metricas*
          * Complejidad Ciclomática.
          * Complejidad esencial.
          * Incumplimiento de la Ley de Demeter sobre linea de código.
    * ¿Como mido la complejidad de mi diseño? *arriba habla de claridad, de nuevo*
      * *Metricas*
          * Promedio de Cohesión Funcional.
          * Cantidad de Patrones.
          * Cantidad de Anti-Patrones.

== Referencias ==

  # Latencia: Termino utilizado en retardo de transmisión de datos en las redes. Reutilizado en este caso como la suma de los retardos parciales de los algoritmos.
  # Claridad: código con poca ofuscación[3].
  # Ofuscación: Es el código fuente o diseño lógico  que se ha hecho difícil de entender de manera intencional o accidental. Ofuscación y optimización no son necesariamente opuestas, pero involuntariamente a veces se produce cuando los programadores o diseñadores ofuscan en un intento de optimizar prematuramente.